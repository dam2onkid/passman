---
description:
globs:
alwaysApply: false
---
# Next.js Performance Optimization

## Server vs Client Components
- Default to React Server Components (RSC) when possible
- Add 'use client' directive only to components that:
  - Use browser-only APIs
  - Use React hooks (useState, useEffect, etc.)
  - Need event listeners (onClick, onChange, etc.)
  - Require client-side interactivity

## Data Fetching
- Prefer server-side data fetching in Server Components
- Use React Query for client-side data fetching with proper caching
- Configure appropriate staleTime and cacheTime for different data types
- Implement proper loading and error states

## Rendering Strategies
- Use streaming for improved initial page load
- Implement Suspense boundaries for component-level loading states
- Utilize Next.js parallel routes for complex layouts

## Image Optimization
- Always use Next.js Image component for images
- Provide proper width and height attributes
- Use appropriate priority for above-the-fold images
- Implement responsive sizes attribute for different viewports

## Route Optimization
- Implement page metadata properly for SEO
- Use dynamic imports for code splitting
- Prefetch important routes for improved UX
- Implement proper error handling for routes

## State Management
- Keep state as local as possible
- Use React Context sparingly and only for truly global state
- Consider Server Components for components that don't need client state

## Example: Optimized Component
```jsx
// Non-interactive components should be Server Components (no directive needed)
export function StaticContent({ data }) {
  return <div>{data}</div>;
}

// Interactive components need the 'use client' directive
'use client';
import { useState } from 'react';

export function InteractiveContent() {
  const [count, setCount] = useState(0);

  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}
