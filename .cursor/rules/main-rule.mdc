---
description:
globs:
alwaysApply: false
---
# PASSMAN PROJECT CODING RULES

### Core Principles
- Write clean, maintainable code with early returns when applicable
- Use descriptive variable and function names
- Prefix event handlers with "handle" (e.g., handleClick, handleChange)
- Focus on modularity and component reusability

### File Structure
- Place components in src/components/
- Group related UI components in src/components/ui/
- Store hooks in src/hooks/ with prefix "use-"
- Keep utility functions in src/lib/
- Follow Next.js app router patterns for pages in src/app/

### Styling
- Use Tailwind CSS exclusively for styling - no CSS files
- Use the cn() utility for conditional class merging
- Follow mobile-first responsive design patterns
- Use the class-variance-authority library for component variants

### JavaScript/React
- Use modern React patterns with hooks
- Function expressions for components (export function Component() or const Component = () =>)
- Use "use client" directive for client-side components
- Use early returns for improved readability
- Use destructuring for props
- Prefer named exports over default exports

### State Management
- Use React useState for local component state
- Use custom hooks to share stateful logic
- Use Zustand for global state management when needed

### Component Patterns
- Use Radix UI primitives for accessible components
- Pass children as props when appropriate
- Implement proper accessibility attributes
- Keep components focused on a single responsibility

### Performance
- Memoize expensive calculations
- Use appropriate key props in lists
- Implement proper data fetching strategies
- Configure React Query with appropriate stale/cache times
- Follow [Next.js optimization best practices](mdc:.cursor/rules/05-nextjs-optimization.mdc)

### Sui Blockchain Integration
- Use @mysten/dapp-kit for all Sui blockchain interactions
- Access wallet functionality through the useSuiWallet hook
- Handle wallet connection states appropriately in UI components
- Implement proper error handling for blockchain transactions
- Follow the [Sui Integration architecture](mdc:.cursor/rules/04-sui-integration.mdc)

### Forms & Inputs
- Implement proper form validation
- Use controlled components for form inputs
- Handle form submission with proper error states

### Best Practices
- Write self-documenting code (minimal comments)
- Implement proper error handling
- Follow security best practices for password management
- Test components for edge cases